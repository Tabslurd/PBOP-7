# -*- coding: utf-8 -*-
"""Untitled53.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1rpF9fbT5z5ieibvkWJTwAMQ6BlkBuqu1
"""

# Polymorphism dengan Fungsi

print(len("Polymorphism"))
print(len([0,1,2,3]))

# Using class
class Jerman():
  def ibukota(self):
    print("Berlin adlaah ibukota negara Jerman")

class Jepang():
  def ibukota(self):
    print("Tokyo adalah ibukota negara Jepang")

negara1 = Jerman()
negara2 = Jepang()

for country in (negara1,negara2):
  country.ibukota()

# Polymorphism dengan Class

class Kucing():
  def __init__(self,nama,umur):
    self.nama=nama
    self.umur=umur

  def suara(self):
    print("Meow")

class Anjing():
  def __init__(self,nama,umur):
    self.nama=nama
    self.umur=umur

  def suara(self):
    print("Guk")

kucing1 = Kucing("Tom",3)
anjing1 = Anjing("Rocky",4)

for hewan in (kucing1,anjing1):
  hewan.suara()

# Polymorphism dengan Inheritance

class Burung():
  def intro(self):
    print("Di dunia ini ada beberapa tipe berbeda dari spesies burung")
  
  def terbang(self):
    print("Hampir semua burung dapat terbang, namun ada beberapa yang tidak dapat terbang")
  
class Elang(Burung):
  def terbang(self):
    print("Elang dapat terbang")

class BurungUnta(Burung):
  def terbang(self):
    print("Burung Unta tidak dapat terbang")

obj_burung = Burung()
obj_elang = Elang()
obj_burungunta = BurungUnta()

obj_burung.intro()
obj_burung.terbang()

obj_elang.intro()
obj_elang.terbang()

obj_burungunta.intro()
obj_burungunta.terbang()

# Implementasi Kelas Abstrak

from abc import ABC, abstractmethod
class Bentuk(ABC):
  @abstractmethod
  def luas(self):
    return self.__sisi * self.__sisi
  @abstractmethod
  def keliling(self):
    return 4 * self.__sisi

class Persegi(Bentuk):
  def __init__(self,sisi):
    self.__sisi = sisi
  def luas(self):
    return self.__sisi * self.__sisi
  def keliling(self):
    return 4 * self.__sisi

persegi = Persegi(6)
print(persegi.luas())
print(persegi.keliling())

# Implementasi Overloading
class Pegawai():
  jumlah = 0

  def __init__ (self,nama,gaji):
    self.nama=nama
    self.gaji=gaji
    Pegawai.jumlah += 1

  def tampilJumlah(self):
    print("Total Pegawai", Pegawai.jumlah)

  def tampilPegawai(self):
    print("Nama :", self.nama, ", Gaji :", self.gaji)
# Method Overloading
  def tunjangan(self,istri=None,anak=None):
    if anak != None and istri != None:
      total = anak + istri
      print("Tunjangan Anak + Istri : ",total)
# Memanggil Kelas
peg1 = Pegawai("Eren",2000)
peg2 = Pegawai("Luffy",6000)
peg1.tampilPegawai()
peg1.tunjangan(2500,2000) # Overloading
peg2.tampilPegawai()
peg2.tunjangan(0,2000)  # Overloading

print("Total Pegawai %d" % Pegawai.jumlah)
rataGaji=(peg1.gaji+peg2.gaji)/Pegawai.jumlah
print("Rata-rata Gaji Pegawai : " + str(rataGaji))

# Implementasi Overriding
class Segiempat():
  def __init__(self,panjang,lebar):
    self.panjang=panjang
    self.lebar=lebar

  def hitungLuas (self):  # Method Overriding
    print("Luas Segiempat :",self.panjang * self.lebar, "m^2")

class Bujursangkar(Segiempat):
  def __init__(self,sisi):
    self.side=sisi
    Segiempat.__init__(self,sisi,sisi)

  def hitungLuas(self): # Method Overriding
    print("Luas Bujur Sangkar :",self.side * self.side, "m^2")

# Memanggil Kelas
b = Bujursangkar(4)
s = Segiempat(2,4)
b.hitungLuas()
s.hitungLuas()

# Implementasi Overloading
class Mahasiswa():
  def __init__(self,nama,nim):
    self.nama=nama
    self.nim=nim

  def tampilMhs(self):
    print("Nama :",self.nama,", NIM :",self.nim)

# Method Overloading
  def hitungSKS(self,jmsks=None,sks=None):
    if jmsks !=None and sks !=None:
      totalsks = jmsks+sks
      print("Total SKS :",totalsks)
    else:
      totalsks = jmsks
      print("Total SKS :",totalsks)
    if totalsks >= 100:
      print("Selamat anda dapat mengambil skripsi")
    else:
      print("Maaf anda belum dapat mengambil skripsi")

# Memanggil Kelas
mhs1 = Mahasiswa("Budi",3423)
mhs1.tampilMhs()
mhs1.hitungSKS(80,34) # Overloading
print()
mhs2 = Mahasiswa("Doremi",1234)
mhs2.tampilMhs()
mhs2.hitungSKS(84) # Overloading

# Implementasi Overriding
class Mahasiswa():
  def __init__(self,nama,nim):
    self.nama=nama
    self.nim=nim

  def tampilData(self): # Method Overriding
    print("Nama :",self.nama,", NIM :",self.nim)

class Kendaraan(Mahasiswa):
  def __init__(self,jenis,roda):
    self.jenis=jenis
    self.roda=roda
    Mahasiswa.__init__(self,jenis,roda)
  
  def tampilData(self): # Method Overriding
    print("Kendaraan :",self.jenis,"Roda :",self.roda)
  
# Memanggil Kelas
mhs1 = Mahasiswa("Mahmud",5028)
kdr1 = Kendaraan("Motor",2)
mhs1.tampilData()
kdr1.tampilData()
print()
mhs2 = Mahasiswa("Udin",8573)
kdr2 = Kendaraan("Mobil",4)
mhs2.tampilData()
kdr2.tampilData()

# Implementasi Overloading Class ComputerPart
class ComputerPart():
  def __init__(self,nama,harga): 
    self.nama = nama 
    self.harga = harga
  def data(self):
    print('Nama :',self.nama,', Harga :',self.harga)
  
# Method Overloading
  def stok(self,stok): 
    if stok >= 10:
      print("Stok Masih Banyak")
    else:
      print("Stok Terbatas!")

# Memanggil Kelas
pc = ComputerPart('Komputer Desktop Gaming Fullset Platform Intel','Rp 9.634.000')
pc.data()
pc.stok(10) # Overloading
print()
mb = ComputerPart('MSI H510M A Pro','Rp 1.150.000')
mb.data()
mb.stok(4) # Overloading
print()
cpu = ComputerPart('Intel Core i5 11400F','Rp 2.535.000')
cpu.data()
cpu.stok(12) # Overloading
print()
gpu = ComputerPart('Gigabyte Geforce GTX 1050 Ti 4GB GDDR5','Rp 3.950.000')
gpu.data()
gpu.stok(23) # Overloading
print()
ram = ComputerPart('Klevv Bolt X Series DDR4-3200 16GB (2x8GB)','Rp 1.050.000')
ram.data()
ram.stok(5) # Overloading
print()
hdd = ComputerPart('SSD Adata SX8200 Pro M.2 NVME 512 GB','Rp 949.000')
hdd.data()
hdd.stok(4) # Overloading

# Implementasi Overriding Class ComputerPart
class ComputerPart():
  def __init__(self,nama,harga): 
    self.nama = nama 
    self.harga = harga

  def data(self): # Method Overriding
    print('Nama :',self.nama,', Harga :',self.harga)

class Motherboard(ComputerPart): 
  def __init__(self,nama,harga):
    self.nama = nama 
    self.harga = harga

  def data(self): # Method Overriding
    print('Nama :',self.nama,', Harga :',self.harga)

class CentralProcessingUnit(ComputerPart):
  def __init__(self,nama,harga): 
    self.nama = nama
    self.harga = harga

  def data(self): # Method Overriding
    print('Nama :',self.nama,', Harga :',self.harga)

class GraphicsProcessingUnit(ComputerPart):
  def __init__(self,nama,harga):
    self.nama = nama
    self.harga = harga

  def data(self): # Method Overriding
    print('Nama :',self.nama,', Harga :',self.harga)

class RandomAccesMemory(ComputerPart): 
  def __init__(self,nama,harga):
    self.nama = nama 
    self.harga = harga

  def data(self): # Method Overriding
    print('Nama :',self.nama,', Harga :',self.harga)

class HardDiskSATA(ComputerPart):
  def __init__(self,nama,harga):
    self.nama = nama 
    self.harga = harga

  def data(self): # Method Overriding
    print('Nama :',self.nama,', Harga :',self.harga)

# Memanggil Kelas
pc = ComputerPart('Komputer Desktop Gaming Fullset Platform Intel','Rp 9.634.000')
pc.data()
mb = Motherboard('MSI H510M A Pro','Rp 1.150.000')
mb.data()
cpu = CentralProcessingUnit('Intel Core i5 11400F','Rp 2.535.000')
cpu.data()
gpu = GraphicsProcessingUnit('Gigabyte Geforce GTX 1050 Ti 4GB GDDR5','Rp 3.950.000')
gpu.data()
ram = RandomAccesMemory('Klevv Bolt X Series DDR4-3200 16GB (2x8GB)','Rp 1.050.000')
ram.data()
hdd = HardDiskSATA('SSD Adata SX8200 Pro M.2 NVME 512 GB','Rp 949.000')
hdd.data()